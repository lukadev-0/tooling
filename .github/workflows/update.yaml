name: Update tools

on:
  workflow_dispatch:
  schedule:
    # Run every day at 18:30 UTC
    - cron: '30 18 * * *'

concurrency:
  # Ensure this workflow does not run twice at the same time
  group: ${{ github.workflow }}

jobs:
  fetch-new-versions:
    name: Fetch new versions
    runs-on: ubuntu-latest

    outputs:
      new_version: ${{ steps.new_version.outputs.new_versions }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: update-trunk
      - name: Update branch
        run: |
          git fetch origin feat/auto-update-workflow
          git merge --allow-unrelated-histories -X theirs origin/feat/auto-update-workflow
      - name: Setup pesde
        uses: axiom-co/setup-pesde@b690699ace34169731b6b2a1c93b2008472038a7
        with:
          cache: true
      - name: Install dependencies
        run: pesde install
          
      - name: Fetch new versions
        id: new_versions
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          lune -V
          new_versions="$(lune run update_tools -- --json | jq -c 'to_entries | map({ package: .key, versions: .value })')"
          echo "new_versions=$new_versions" >> "$GITHUB_OUTPUT"

  update-package:
    name: Update ${{ matrix.package }}
    runs-on: ubuntu-latest

    needs: fetch-new-versions
    strategy:
      matrix:
        include: ${{ fromJSON(needs.fetch-new-versions.outputs.new_version) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: update-trunk
      - name: Setup pesde
        uses: axiom-co/setup-pesde@b690699ace34169731b6b2a1c93b2008472038a7
        with:
          cache: true
      - name: Install dependencies
        run: pesde install
      - name: Update package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

          echo '${{ toJson(matrix.versions) }}' | jq -r '.[]' | while read -r version; do
            local branch="update/${{ matrix.package }}/$version"

            # Switch to new branch
            git switch -c "$branch"

            # Perform the update
            lune run update_tools -- "${{ matrix.package }}" "$version"

            # Stage & commit changes
            git add .
            git commit -m "${{ matrix.package }}: $version"

            # Push
            git push origin "$branch"
          done
